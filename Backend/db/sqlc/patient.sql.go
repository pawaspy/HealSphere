// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: patient.sql

package db

import (
	"context"
)

const checkPatientEmailExists = `-- name: CheckPatientEmailExists :one
SELECT EXISTS(SELECT 1 FROM patients WHERE email = $1) AS exists
`

func (q *Queries) CheckPatientEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPatientEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPatientUsernameExists = `-- name: CheckPatientUsernameExists :one
SELECT EXISTS(SELECT 1 FROM patients WHERE username = $1) AS exists
`

func (q *Queries) CheckPatientUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPatientUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
    username,
    name,
    email,
    password_hash,
    phone,
    age,
    gender
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING username, name, email, password_hash, phone, age, gender, created_at, updated_at
`

type CreatePatientParams struct {
	Username     string `json:"username"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	Phone        string `json:"phone"`
	Age          int32  `json:"age"`
	Gender       string `json:"gender"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Phone,
		arg.Age,
		arg.Gender,
	)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Age,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients
WHERE username = $1
`

func (q *Queries) DeletePatient(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deletePatient, username)
	return err
}

const getPatientByEmail = `-- name: GetPatientByEmail :one
SELECT username, name, email, password_hash, phone, age, gender, created_at, updated_at FROM patients
WHERE email = $1
`

func (q *Queries) GetPatientByEmail(ctx context.Context, email string) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByEmail, email)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Age,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPatientByUsername = `-- name: GetPatientByUsername :one
SELECT username, name, email, password_hash, phone, age, gender, created_at, updated_at FROM patients
WHERE username = $1
`

func (q *Queries) GetPatientByUsername(ctx context.Context, username string) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByUsername, username)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Age,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPatients = `-- name: ListPatients :many
SELECT username, name, email, password_hash, phone, age, gender, created_at, updated_at FROM patients
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListPatientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPatients(ctx context.Context, arg ListPatientsParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Patient{}
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.Username,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.Phone,
			&i.Age,
			&i.Gender,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatientPassword = `-- name: UpdatePatientPassword :exec
UPDATE patients
SET
    password_hash = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE username = $1
`

type UpdatePatientPasswordParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdatePatientPassword(ctx context.Context, arg UpdatePatientPasswordParams) error {
	_, err := q.db.Exec(ctx, updatePatientPassword, arg.Username, arg.PasswordHash)
	return err
}

const updatePatientProfile = `-- name: UpdatePatientProfile :one
UPDATE patients
SET
    name = $2,
    email = $3,
    phone = $4,
    age = $5,
    gender = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE username = $1
RETURNING username, name, email, password_hash, phone, age, gender, created_at, updated_at
`

type UpdatePatientProfileParams struct {
	Username string `json:"username"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Age      int32  `json:"age"`
	Gender   string `json:"gender"`
}

func (q *Queries) UpdatePatientProfile(ctx context.Context, arg UpdatePatientProfileParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatientProfile,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Age,
		arg.Gender,
	)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.Age,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
