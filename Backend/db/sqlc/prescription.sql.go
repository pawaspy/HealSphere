// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: prescription.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPrescription = `-- name: CreatePrescription :one
INSERT INTO prescriptions (
  appointment_id,
  prescription_text,
  consultation_notes
) VALUES (
  $1, $2, $3
) RETURNING id, appointment_id, prescription_text, consultation_notes, feedback_rating, feedback_comment, created_at, updated_at
`

type CreatePrescriptionParams struct {
	AppointmentID     int64       `json:"appointment_id"`
	PrescriptionText  string      `json:"prescription_text"`
	ConsultationNotes pgtype.Text `json:"consultation_notes"`
}

func (q *Queries) CreatePrescription(ctx context.Context, arg CreatePrescriptionParams) (Prescription, error) {
	row := q.db.QueryRow(ctx, createPrescription, arg.AppointmentID, arg.PrescriptionText, arg.ConsultationNotes)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.PrescriptionText,
		&i.ConsultationNotes,
		&i.FeedbackRating,
		&i.FeedbackComment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePrescription = `-- name: DeletePrescription :exec
DELETE FROM prescriptions
WHERE appointment_id = $1
`

func (q *Queries) DeletePrescription(ctx context.Context, appointmentID int64) error {
	_, err := q.db.Exec(ctx, deletePrescription, appointmentID)
	return err
}

const getPrescription = `-- name: GetPrescription :one
SELECT id, appointment_id, prescription_text, consultation_notes, feedback_rating, feedback_comment, created_at, updated_at FROM prescriptions
WHERE appointment_id = $1 LIMIT 1
`

func (q *Queries) GetPrescription(ctx context.Context, appointmentID int64) (Prescription, error) {
	row := q.db.QueryRow(ctx, getPrescription, appointmentID)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.PrescriptionText,
		&i.ConsultationNotes,
		&i.FeedbackRating,
		&i.FeedbackComment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFeedback = `-- name: UpdateFeedback :one
UPDATE prescriptions
SET feedback_rating = $2,
    feedback_comment = $3,
    updated_at = now()
WHERE appointment_id = $1
RETURNING id, appointment_id, prescription_text, consultation_notes, feedback_rating, feedback_comment, created_at, updated_at
`

type UpdateFeedbackParams struct {
	AppointmentID   int64       `json:"appointment_id"`
	FeedbackRating  pgtype.Int4 `json:"feedback_rating"`
	FeedbackComment pgtype.Text `json:"feedback_comment"`
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) (Prescription, error) {
	row := q.db.QueryRow(ctx, updateFeedback, arg.AppointmentID, arg.FeedbackRating, arg.FeedbackComment)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.PrescriptionText,
		&i.ConsultationNotes,
		&i.FeedbackRating,
		&i.FeedbackComment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePrescription = `-- name: UpdatePrescription :one
UPDATE prescriptions
SET prescription_text = $2,
    consultation_notes = $3,
    updated_at = now()
WHERE appointment_id = $1
RETURNING id, appointment_id, prescription_text, consultation_notes, feedback_rating, feedback_comment, created_at, updated_at
`

type UpdatePrescriptionParams struct {
	AppointmentID     int64       `json:"appointment_id"`
	PrescriptionText  string      `json:"prescription_text"`
	ConsultationNotes pgtype.Text `json:"consultation_notes"`
}

func (q *Queries) UpdatePrescription(ctx context.Context, arg UpdatePrescriptionParams) (Prescription, error) {
	row := q.db.QueryRow(ctx, updatePrescription, arg.AppointmentID, arg.PrescriptionText, arg.ConsultationNotes)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.PrescriptionText,
		&i.ConsultationNotes,
		&i.FeedbackRating,
		&i.FeedbackComment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
