// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appointment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAppointmentNotes = `-- name: AddAppointmentNotes :one
UPDATE appointments
SET
    notes = $2,
    updated_at = CURRENT_DATE
WHERE id = $1
RETURNING id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online
`

type AddAppointmentNotesParams struct {
	ID    int64       `json:"id"`
	Notes pgtype.Text `json:"notes"`
}

func (q *Queries) AddAppointmentNotes(ctx context.Context, arg AddAppointmentNotesParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, addAppointmentNotes, arg.ID, arg.Notes)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.DoctorUsername,
		&i.DoctorName,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.Specialty,
		&i.Symptoms,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsOnline,
	)
	return i, err
}

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (
    patient_username,
    doctor_username,
    doctor_name,
    appointment_date,
    appointment_time,
    specialty,
    symptoms,
    status,
    is_online
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online
`

type CreateAppointmentParams struct {
	PatientUsername string      `json:"patient_username"`
	DoctorUsername  string      `json:"doctor_username"`
	DoctorName      string      `json:"doctor_name"`
	AppointmentDate pgtype.Date `json:"appointment_date"`
	AppointmentTime string      `json:"appointment_time"`
	Specialty       string      `json:"specialty"`
	Symptoms        string      `json:"symptoms"`
	Status          string      `json:"status"`
	IsOnline        pgtype.Bool `json:"is_online"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.PatientUsername,
		arg.DoctorUsername,
		arg.DoctorName,
		arg.AppointmentDate,
		arg.AppointmentTime,
		arg.Specialty,
		arg.Symptoms,
		arg.Status,
		arg.IsOnline,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.DoctorUsername,
		&i.DoctorName,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.Specialty,
		&i.Symptoms,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsOnline,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments
WHERE id = $1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAppointment, id)
	return err
}

const getAppointmentById = `-- name: GetAppointmentById :one
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE id = $1
`

func (q *Queries) GetAppointmentById(ctx context.Context, id int64) (Appointment, error) {
	row := q.db.QueryRow(ctx, getAppointmentById, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.DoctorUsername,
		&i.DoctorName,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.Specialty,
		&i.Symptoms,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsOnline,
	)
	return i, err
}

const listCompletedPatientAppointments = `-- name: ListCompletedPatientAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE patient_username = $1 AND status = 'completed'
ORDER BY appointment_date DESC, appointment_time DESC
`

func (q *Queries) ListCompletedPatientAppointments(ctx context.Context, patientUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listCompletedPatientAppointments, patientUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorAppointments = `-- name: ListDoctorAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE doctor_username = $1
ORDER BY appointment_date, appointment_time
`

func (q *Queries) ListDoctorAppointments(ctx context.Context, doctorUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listDoctorAppointments, doctorUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientAppointments = `-- name: ListPatientAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE patient_username = $1
ORDER BY appointment_date, appointment_time
`

func (q *Queries) ListPatientAppointments(ctx context.Context, patientUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listPatientAppointments, patientUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodayDoctorAppointments = `-- name: ListTodayDoctorAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE doctor_username = $1 AND appointment_date = CURRENT_DATE
ORDER BY appointment_time
`

func (q *Queries) ListTodayDoctorAppointments(ctx context.Context, doctorUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listTodayDoctorAppointments, doctorUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodayPatientAppointments = `-- name: ListTodayPatientAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE patient_username = $1 AND appointment_date = CURRENT_DATE
ORDER BY appointment_time
`

func (q *Queries) ListTodayPatientAppointments(ctx context.Context, patientUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listTodayPatientAppointments, patientUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingDoctorAppointments = `-- name: ListUpcomingDoctorAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE doctor_username = $1 AND appointment_date >= CURRENT_DATE AND status = 'upcoming'
ORDER BY appointment_date, appointment_time
`

func (q *Queries) ListUpcomingDoctorAppointments(ctx context.Context, doctorUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listUpcomingDoctorAppointments, doctorUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingPatientAppointments = `-- name: ListUpcomingPatientAppointments :many
SELECT id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online FROM appointments
WHERE patient_username = $1 AND appointment_date >= CURRENT_DATE AND status = 'upcoming'
ORDER BY appointment_date, appointment_time
`

func (q *Queries) ListUpcomingPatientAppointments(ctx context.Context, patientUsername string) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listUpcomingPatientAppointments, patientUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.DoctorUsername,
			&i.DoctorName,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Specialty,
			&i.Symptoms,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :one
UPDATE appointments
SET
    status = $2,
    updated_at = CURRENT_DATE
WHERE id = $1
RETURNING id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online
`

type UpdateAppointmentStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, updateAppointmentStatus, arg.ID, arg.Status)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.DoctorUsername,
		&i.DoctorName,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.Specialty,
		&i.Symptoms,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsOnline,
	)
	return i, err
}

const updateOnlineStatus = `-- name: UpdateOnlineStatus :one
UPDATE appointments
SET
    is_online = $2,
    updated_at = CURRENT_DATE
WHERE id = $1
RETURNING id, patient_username, doctor_username, doctor_name, appointment_date, appointment_time, specialty, symptoms, status, notes, created_at, updated_at, is_online
`

type UpdateOnlineStatusParams struct {
	ID       int64       `json:"id"`
	IsOnline pgtype.Bool `json:"is_online"`
}

func (q *Queries) UpdateOnlineStatus(ctx context.Context, arg UpdateOnlineStatusParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, updateOnlineStatus, arg.ID, arg.IsOnline)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.DoctorUsername,
		&i.DoctorName,
		&i.AppointmentDate,
		&i.AppointmentTime,
		&i.Specialty,
		&i.Symptoms,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsOnline,
	)
	return i, err
}
